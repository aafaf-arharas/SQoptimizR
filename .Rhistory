load("~/Stage_Aafaf/Breedwheat/5-Optimization/Emergence/600/optim_results.Rdata")
print(res$MAP)
print(res)
summary(res$out)
load("C:/Users/arharasa/Desktop/résultats optimisation phénologie/Maturity_600it/optim_results.Rdata")
prin(res$MAP)
print(res$MAP)
load("C:/Users/arharasa/Desktop/résultats optimisation phénologie/Anthèse_600it/optim_results.Rdata")
print(res$MAP)
load("C:/Users/arharasa/Desktop/résultats optimisation phénologie/Emergnece_1800it/optim_results.Rdata")
print(res$MAP)
load("C:/Users/arharasa/Desktop/résultats optimisation phénologie/GAI_600it/optim_results.Rdata")
print(res$MAP)
load("C:/Users/arharasa/Desktop/résultats optimisation phénologie/Maturity_600it/optim_results.Rdata")
print(res$MAP)
load("C:/Users/arharasa/Desktop/résultats optimisation phénologie/Maturity_1200it/optim_results.Rdata")
print(res$MAP)
# Lire les dates de semis ‘Planting_date’ à partir des fichiers d’entrée de SQ ‘Management’
library(ggplot2)
library(stringr)
library(openxlsx)
library(tidyverse)
require(XML)
load_obs <- function( obs_daily_path, obs_sum_path, project_path, dailyVar, sumVar) {
#find number of rows to skip (obs) :
obsfile <- readLines(obs_daily_path)
k=1
while(k < length(obsfile )){
ligne = str_split(obsfile[k],"\t")
if(ligne[[1]]=="ID"){
Skip = k
break
}
k=k+1
}
obs_daily            <- read.csv(obs_daily_path,skip=Skip-1, header=T,
na.strings = "-999", sep = "\t")
obs_sum              <- read.csv(obs_sum_path,skip=Skip-1, header=T,
na.strings = "-999", sep = "\t")
########### planting dates
Management = paste0(project_path, "Breedwheat Biotech panel trials for model calibration (T1.3)_2021-07-15_Management.sqman",sep="")
data <- xmlParse(Management)
xml_data <- xmlToList(data)
obs_planting = list()
names=c()
for(i in 1: length(xml_data$ItemsArray)){
name = xml_data$ItemsArray[i]$ManagementItem$.attrs
names[[length(names)+1]] = substr(name, 1, nchar(name)-2)
obs_planting[[length(obs_planting)+1]] = substr(xml_data$ItemsArray[i]$ManagementItem$SowingDate,1,10)
}
names(obs_planting)=names
doublons <- which(duplicated(obs_planting))
obs_planting <-obs_planting[-doublons]
##################
situations <- obs_daily$ID
experiments <- obs_daily$EID
N_sit = length(situations)
obs_list       <- {}
i=1
while (i<N_sit & situations[i]!="" )
{
name_sit        <- as.character(situations[i])
name_exp        <- as.character(experiments[i])
Data_daily      <- obs_daily[obs_daily$ID == name_sit,c('EID','date',dailyVar)]
Data_sum        <- obs_sum[obs_sum$ID == name_sit,c('EID', sumVar)]
planting_Date   <- as.Date(obs_planting[names(obs_planting)==name_exp][[1]])
#col_Date = seq(as.Date(planting_Date), as.Date(planting_Date) + 250, by = "day")
Data            <- data.frame(matrix(NA,ncol=length(c("Date",dailyVar, sumVar)),nrow=length(Data_daily$date)))
#Data            <- data.frame(matrix(NA,ncol=length(c("Date",dailyVar, sumVar)),nrow=length(col_Date)))
names(Data) = c("Date",dailyVar, sumVar)
Data["Date"]  = as.Date(Data_daily$date)
#Data["Date"] =col_Date
for(var in dailyVar){
Data[var] = Data_daily[var]
}
for(var in sumVar){
if(is.character(Data_sum[var][[1]])){
Var = NA
if(Data_sum[var] != ""){
Var = abs(as.integer(difftime(planting_Date, Data_sum[var][[1]], units = "days")))
}
Data[var] = Var
}else{
Data[var] =  Data_sum[var]
}
}
obs_list[[name_sit]]    <- Data
i=i+1
}
return(obs_list)
}
obs_daily_path = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/BW elite panel for model calibration (T1.3).sqday"
obs_sum_path = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/BW elite panel for model calibration (T1.3).sqsum"
project_path       <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project/"
dailyVar = c('GAID')
sumVar = NULL  #c('PLDAE','ADAT', 'HDATE') # NULL
obs_list <- load_obs(obs_daily_path, obs_sum_path, project_path, dailyVar, sumVar)
print(obs_list$ARVgre2018HI_APACHE)
# The first trial to estimate parameters
# Shouyang
```{r setup and initializations,  eval=TRUE, message=FALSE, results=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
gc()
# Install and load the needed libraries
if(!require("doParallel")){
install.packages("doParallel",repos="http://cran.irsn.fr")
library("doParallel")
}
if(!require("hydroGOF")){
install.packages("hydroGOF",repos="http://cran.irsn.fr")
library("hydroGOF")
}
if(!require("CroptimizR")){
devtools::install_github("SticsRPacks/CroptimizR@*release")
library("CroptimizR")
}
library("BayesianTools")
library("coda")
#library(here)
#home.wd <- here()
home.wd <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/7-R-scripts/Greoux_HTP"
source(paste0(home.wd, "/SQ_model_Parallel.R"))
```
## Set prior information on the parameters to estimate
```{r eval=TRUE, message=FALSE, warning=FALSE}
#param_info  <- list(lb=c(AreaPL=10, NLL=2, AreaSL=0, AreaSS=0),
#                   ub=c(AreaPL=70, NLL=10, AreaSL=5, AreaSS=5),
#                    init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), #AreaSL=c(2.5), AreaSS=c(1.83)))
param_info  <- list(lb=c(AreaPL=15, NLL=4, AreaSL=2),
ub=c(AreaPL=40, NLL=7, AreaSL=10),
init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), AreaSL=c(2.5)))
Param_list         <- data.frame(name = c("AreaPL", "NLL", "AreaSL"),
type = c("Var", "Var", "Var"))
```
## Run the model before optimization for a prior evaluation
In this case, the argument param_values of the wrapper is not set: the values of the model input parameters are all read in the model input files.
```{r eval=TRUE, message=FALSE, warning=FALSE}
# Prepare model options
model_options                 <- {}
model_options$cores_nb        <- 8
model_options$Param_list      <- Param_list
model_options$time_display    <- T
model_options$output_path     <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/3-Output/"
model_options$console_path <-"C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/8-Console/SiriusQuality-Console.exe"
project_path <-  "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project/"
runs2simulate <- "RUN_GAID"
runs2notsimulate <- NULL
source(paste0(home.wd, "/console.R"))
runs_list           <- Set_runs_list(runs2simulate,runs2notsimulate,project_path)
console_data        <- Set_console_data(runs_list)
model_options$console_data       <- console_data
model_options$projects_path      <- paste0(project_path, "Breedwheat.sqpro",sep="")
print(model_options)
```
## import observation
```{r  eval=TRUE, message=FALSE, warning=FALSE}
# Load the observations
source(paste0(home.wd,"/load_obs_mean.R"))
#print(obs_list)
```
## Set options for the parameter estimation method Dreamz ici
```{r eval=TRUE, message=FALSE, warning=FALSE}
optim_options=list()
optim_options$path_results<-paste0("C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/Optimization_final/") # path where to store results graphs
optim_options$iterations <-  1000 # Total number of iterations
optim_options$startValue <-  3# Number of markov chains
optim_options$ranseed    <-  1234 # seed for random numbers
optim_method="BayesianTools.dreamzs"
crit_function = likelihood_log_ciidn
```
## Run the optimization
```{r eval=TRUE, message=False, warning=TRUE, echo=FALSE, include=FALSE}
#optim_method="nloptr.simplex"
#crit_function = crit_log_cwss
situationsSQ <- console_data$sit2simulate
situationsobs <- names(obs_list)
for(sit in situationsobs ){
if(! is.element(sit, situationsSQ )){
obs_list[sit] =NULL
}
}
#print(console_data$sit2simulate)
#print(names(obs_list))
print(obs_list)
optim_results=estim_param(obs_list=obs_list,
crit_function = crit_function,
model_function=SQ_wrapper,
model_options=model_options,
optim_options=optim_options,
optim_method=optim_method,
param_info=param_info)
## Run the optimization
```{r eval=TRUE, message=False, warning=TRUE, echo=FALSE, include=FALSE}
#optim_method="nloptr.simplex"
#crit_function = crit_log_cwss
situationsSQ <- console_data$sit2simulate
situationsobs <- names(obs_list)
for(sit in situationsobs ){
if(! is.element(sit, situationsSQ )){
obs_list[sit] =NULL
}
}
#print(console_data$sit2simulate)
#print(names(obs_list))
print(obs_list)
optim_results=estim_param(obs_list=obs_list,
crit_function = crit_function,
model_function=SQ_wrapper,
model_options=model_options,
optim_options=optim_options,
optim_method=optim_method,
param_info=param_info)
print(paste("Results of the optimization were saved in",
optim_options$path_results," folder."))
```
load("~/Stage_Aafaf/Breedwheat/Optimization_final/optim_results.Rdata")
print(res$MAP)
print(obs_list)
# The first trial to estimate parameters
# Shouyang
```{r setup and initializations,  eval=TRUE, message=FALSE, results=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
gc()
# Install and load the needed libraries
if(!require("doParallel")){
install.packages("doParallel",repos="http://cran.irsn.fr")
library("doParallel")
}
if(!require("hydroGOF")){
install.packages("hydroGOF",repos="http://cran.irsn.fr")
library("hydroGOF")
}
if(!require("CroptimizR")){
devtools::install_github("SticsRPacks/CroptimizR@*release")
library("CroptimizR")
}
library("BayesianTools")
library("coda")
#library(here)
#home.wd <- here()
home.wd <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/7-R-scripts/Greoux_HTP"
source(paste0(home.wd, "/SQ_model_Parallel.R"))
```
## Set prior information on the parameters to estimate
```{r eval=TRUE, message=FALSE, warning=FALSE}
#param_info  <- list(lb=c(AreaPL=10, NLL=2, AreaSL=0, AreaSS=0),
#                   ub=c(AreaPL=70, NLL=10, AreaSL=5, AreaSS=5),
#                    init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), #AreaSL=c(2.5), AreaSS=c(1.83)))
param_info  <- list(lb=c(AreaPL=15, NLL=4, AreaSL=2),
ub=c(AreaPL=40, NLL=7, AreaSL=10),
init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), AreaSL=c(2.5)))
Param_list         <- data.frame(name = c("AreaPL", "NLL", "AreaSL"),
type = c("Var", "Var", "Var"))
```
## Run the model before optimization for a prior evaluation
In this case, the argument param_values of the wrapper is not set: the values of the model input parameters are all read in the model input files.
```{r eval=TRUE, message=FALSE, warning=FALSE}
# Prepare model options
model_options                 <- {}
model_options$cores_nb        <- 8
model_options$Param_list      <- Param_list
model_options$time_display    <- T
model_options$output_path     <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/3-Output/"
model_options$console_path <-"C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/8-Console/SiriusQuality-Console.exe"
project_path <-  "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project/"
runs2simulate <- "RUN_GAID"
runs2notsimulate <- NULL
source(paste0(home.wd, "/console.R"))
runs_list           <- Set_runs_list(runs2simulate,runs2notsimulate,project_path)
console_data        <- Set_console_data(runs_list)
model_options$console_data       <- console_data
model_options$projects_path      <- paste0(project_path, "Breedwheat.sqpro",sep="")
print(model_options)
```
## import observation
```{r  eval=TRUE, message=FALSE, warning=FALSE}
# Load the observations
source(paste0(home.wd,"/load_obs_mean.R"))
#print(obs_list)
```
## Set options for the parameter estimation method Dreamz ici
```{r eval=TRUE, message=FALSE, warning=FALSE}
optim_options=list()
optim_options$path_results<-paste0("C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/Optimization_final/") # path where to store results graphs
optim_options$iterations <-  1000 # Total number of iterations
optim_options$startValue <-  3# Number of markov chains
optim_options$ranseed    <-  1234 # seed for random numbers
#optim_method="BayesianTools.dreamzs"
#crit_function = likelihood_log_ciidn
optim_method    <-"nloptr.simplex"
crit_function   <- crit_log_cwss
nb_rep          <-  7                         # Number of repetitions of the minimization (each time starting with different initial values for the estimated parameters)
maxeval         <-  1000                      # Maximum number of evaluations of the minimized criteria
xtol_rel        <-  1e-04                     # Tolerance criterion between two iterations(threshold for the relative difference ofparameter values between the 2 previousiterations)
```
## Run the optimization
```{r eval=TRUE, message=False, warning=TRUE, echo=FALSE, include=FALSE}
#optim_method="nloptr.simplex"
#crit_function = crit_log_cwss
situationsSQ <- console_data$sit2simulate
situationsobs <- names(obs_list)
for(sit in situationsobs ){
if(! is.element(sit, situationsSQ )){
obs_list[sit] =NULL
}
}
#print(console_data$sit2simulate)
#print(names(obs_list))
print(obs_list)
optim_results=estim_param(obs_list=obs_list,
crit_function = crit_function,
model_function=SQ_wrapper,
model_options=model_options,
optim_options=optim_options,
optim_method=optim_method,
param_info=param_info)
print(paste("Results of the optimization were saved in",
optim_options$path_results," folder."))
```
# Exemple how to use SQwrapper
## Load libraries
library(SQoptimizR)
library(tools)
library(CroptimizR)
# Exemple how to use SQwrapper
## Load libraries
library(SQoptimizR)
library(tools)
library(CroptimizR)
RUNS = c("RUN_GAID", "RUN_PLADE")
#for(run in RUNS){
# optim_options
optim_options  <-  list()
optim_options$path_results    <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/5-Optimization/package_SQoptimizR/Dreamzs" # path where to store results graphs
optim_options$iterations      <-  1000                      # Total number of iterations
optim_options$startValue      <-  3                        # Number of markov chains #22
optim_options$ranseed         <-  1234                     # seed for random numbers
optim_options$nb_rep          <-  7                         # Number of repetitions of the minimization (each time starting with different initial values for the estimated parameters)
optim_options$maxeval         <-  500                      # Maximum number of evaluations of the minimized criteria
optim_options$xtol_rel        <-  1e-03                     # Tolerance criterion between two iterations(threshold for the relative difference ofparameter values between the 2 previousiterations)
#run optimisation
results <- SQ_optim(crit_function  = likelihood_log_ciidn,
optim_method   = "BayesianTools.dreamzs",
obs_daily_path = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqday",
obs_sum_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqsum",
dailyVar       = c("GAID"),
sumVar         = NULL,
obs_sim_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/obs_simulations.csv",
project_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project",
output_path    = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/3-Output/",
console_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/8-Console/SiriusQuality-Console.exe",
param_info     = param_info  <- list(lb=c(AreaPL=15, NLL=4, AreaSL=2),
ub=c(AreaPL=40, NLL=7, AreaSL=10),
init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), AreaSL=c(2.5))),
optim_options  = optim_options,
run2simulate   = "RUN_GAID", #run
cores_nb       = 8,
time_display   = T,
saves_daily_output = "true",
print_console  = "true")
#}
# Exemple how to use SQwrapper
## Load libraries
library(SQoptimizR)
library(tools)
library(CroptimizR)
RUNS = c("RUN_GAID", "RUN_PLADE")
#for(run in RUNS){
# optim_options
optim_options  <-  list()
optim_options$path_results    <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/5-Optimization/package_SQoptimizR/Dreamzs" # path where to store results graphs
optim_options$iterations      <-  1000                      # Total number of iterations
optim_options$startValue      <-  3                        # Number of markov chains #22
optim_options$ranseed         <-  1234                     # seed for random numbers
optim_options$nb_rep          <-  7                         # Number of repetitions of the minimization (each time starting with different initial values for the estimated parameters)
optim_options$maxeval         <-  500                      # Maximum number of evaluations of the minimized criteria
optim_options$xtol_rel        <-  1e-03                     # Tolerance criterion between two iterations(threshold for the relative difference ofparameter values between the 2 previousiterations)
#run optimisation
results <- SQ_optim(crit_function  = likelihood_log_ciidn,
optim_method   = "BayesianTools.dreamzs",
obs_daily_path = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqday",
obs_sum_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqsum",
dailyVar       = c("GAID"),
sumVar         = NULL,
obs_sim_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/obs_simulations.csv",
project_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project",
output_path    = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/3-Output/",
console_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/8-Console/SiriusQuality-Console.exe",
param_info     = param_info  <- list(lb=c(AreaPL=15, NLL=4, AreaSL=2),
ub=c(AreaPL=40, NLL=7, AreaSL=10),
init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), AreaSL=c(2.5))),
optim_options  = optim_options,
run2simulate   = "RUN_GAID",
cores_nb       = 8,
time_display   = T,
saves_daily_output = "true",
print_console  = "true")
#}
# Exemple how to use SQwrapper
## Load libraries
library(SQoptimizR)
library(tools)
library(CroptimizR)
RUNS = c("RUN_GAID", "RUN_PLADE")
#for(run in RUNS){
# optim_options
optim_options  <-  list()
optim_options$path_results    <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/5-Optimization/package_SQoptimizR/Dreamzs" # path where to store results graphs
optim_options$iterations      <-  1000                      # Total number of iterations
optim_options$startValue      <-  3                        # Number of markov chains #22
optim_options$ranseed         <-  1234                     # seed for random numbers
optim_options$nb_rep          <-  7                         # Number of repetitions of the minimization (each time starting with different initial values for the estimated parameters)
optim_options$maxeval         <-  500                      # Maximum number of evaluations of the minimized criteria
optim_options$xtol_rel        <-  1e-03                     # Tolerance criterion between two iterations(threshold for the relative difference ofparameter values between the 2 previousiterations)
#run optimisation
results <- SQ_optim(crit_function  = likelihood_log_ciidn,
optim_method   = "BayesianTools.dreamzs",
obs_daily_path = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqday",
obs_sum_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqsum",
dailyVar       = c("GAID"),
sumVar         = NULL,
obs_sim_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/obs_simulations.csv",
project_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project",
output_path    = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/3-Output/",
console_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/8-Console/SiriusQuality-Console.exe",
param_info     = param_info  <- list(lb=c(AreaPL=15, NLL=4, AreaSL=2),
ub=c(AreaPL=40, NLL=7, AreaSL=10),
init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), AreaSL=c(2.5))),
optim_options  = optim_options,
run2simulate   = "RUN_GAID",
cores_nb       = 8,
time_display   = T,
saves_daily_output = "true",
print_console  = "true")
#}
library(SQoptimizR )
# Exemple how to use SQwrapper
## Load libraries
library(SQoptimizR)
library(tools)
library(CroptimizR)
RUNS = c("RUN_GAID", "RUN_PLADE")
#for(run in RUNS){
# optim_options
optim_options  <-  list()
optim_options$path_results    <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/5-Optimization/package_SQoptimizR/Dreamzs" # path where to store results graphs
optim_options$iterations      <-  1000                      # Total number of iterations
optim_options$startValue      <-  3                        # Number of markov chains #22
optim_options$ranseed         <-  1234                     # seed for random numbers
optim_options$nb_rep          <-  7                         # Number of repetitions of the minimization (each time starting with different initial values for the estimated parameters)
optim_options$maxeval         <-  500                      # Maximum number of evaluations of the minimized criteria
optim_options$xtol_rel        <-  1e-03                     # Tolerance criterion between two iterations(threshold for the relative difference ofparameter values between the 2 previousiterations)
#run optimisation
results <- SQ_optim(crit_function  = likelihood_log_ciidn,
optim_method   = "BayesianTools.dreamzs",
obs_daily_path = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqday",
obs_sum_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Senstivity_Analysis_Junior/Observations/BW elite panel for model calibration (T1.3).sqsum",
dailyVar       = c("GAID"),
sumVar         = NULL,
obs_sim_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/obs_simulations.csv",
project_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project",
output_path    = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/3-Output/",
console_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/8-Console/SiriusQuality-Console.exe",
param_info     = param_info  <- list(lb=c(AreaPL=15, NLL=4, AreaSL=2),
ub=c(AreaPL=40, NLL=7, AreaSL=10),
init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), AreaSL=c(2.5))),
optim_options  = optim_options,
run2simulate   = "RUN_GAID",
cores_nb       = 8,
time_display   = T,
saves_daily_output = "true",
print_console  = "true")
#}
# Exemple how to use SQwrapper
## Load libraries
library(SQoptimizR)
library(tools)
library(CroptimizR)
RUNS = c("RUN_GAID", "RUN_PLADE")
#for(run in RUNS){
# optim_options
optim_options  <-  list()
optim_options$path_results    <- "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/5-Optimization/package_SQoptimizR/Dreamzs" # path where to store results graphs
optim_options$iterations      <-  1000                      # Total number of iterations
optim_options$startValue      <-  3                        # Number of markov chains #22
optim_options$ranseed         <-  1234                     # seed for random numbers
optim_options$nb_rep          <-  7                         # Number of repetitions of the minimization (each time starting with different initial values for the estimated parameters)
optim_options$maxeval         <-  500                      # Maximum number of evaluations of the minimized criteria
optim_options$xtol_rel        <-  1e-03                     # Tolerance criterion between two iterations(threshold for the relative difference ofparameter values between the 2 previousiterations)
#run optimisation
results <- SQ_optim(crit_function  = likelihood_log_ciidn,
optim_method   = "BayesianTools.dreamzs",
obs_daily_path = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/BW elite panel for model calibration (T1.3).sqday",
obs_sum_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/BW elite panel for model calibration (T1.3).sqsum",
dailyVar       = c("GAID"),
sumVar         = NULL,
obs_sim_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/6-Observations/obs_simulations.csv",
project_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/1-Project",
output_path    = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/3-Output/",
console_path   = "C:/Users/arharasa/Documents/Stage_Aafaf/Breedwheat/8-Console/SiriusQuality-Console.exe",
param_info     = param_info  <- list(lb=c(AreaPL=15, NLL=4, AreaSL=2),
ub=c(AreaPL=40, NLL=7, AreaSL=10),
init_values = data.frame(AreaPL = c(35.7), NLL = c(6.5), AreaSL=c(2.5))),
optim_options  = optim_options,
run2simulate   = "RUN_GAID",
cores_nb       = 8,
time_display   = T,
saves_daily_output = "true",
print_console  = "true")
#}
